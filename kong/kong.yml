_format_version: "3.0"
_transform: true

# =====================
# CONSUMERS
# =====================
consumers:
  - username: shared-consumer
    jwt_secrets:
      - key: shared-key
        secret: your_strong_secret_key_at_least_32_chars_long
        algorithm: HS256

# =====================
# SERVICES
# =====================
services:
  - name: backend-api
    url: https://6e00-122-175-23-214.ngrok-free.app
    
  - name: auth-service
    url: https://6e00-122-175-23-214.ngrok-free.app
    
  - name: frontend-service
    url: http://host.docker.internal:3000

# =====================
# ROUTES
# =====================
routes:
  - name: api-route
    service: backend-api
    paths:
      - /api
    strip_path: false
    
  - name: auth-route
    service: auth-service
    paths:
      - /auth
      - /token
      - /logout
      - /error
      - /saml2
      - /login
    strip_path: false

  - name: profile-route
    service: frontend-service
    paths:
      - /profile
    strip_path: false

  - name: dashboard-route
    service: frontend-service
    paths:
      - /dashboard
    strip_path: false

  - name: root-route
    service: frontend-service
    paths:
      - /
    strip_path: false

# =====================
# PLUGINS
# =====================
plugins:
  - name: jwt
    config:
      secret_is_base64: false
      key_claim_name: iss
      claims_to_verify:
        - exp
      cookie_names:
        - access_token
      run_on_preflight: false
      header_names: [] # Explicitly empty to prioritize cookies
  
  - name: pre-function
    tags:
      - token-handler
    config:
      access:
        - |
          local token = kong.request.get_query_arg("token")
          local redirect_uri = kong.request.get_query_arg("redirect_uri")
          if token then
            kong.log.notice("Found token in URL, setting cookie")
            kong.response.set_header("Set-Cookie", 
              "access_token=" .. token .. 
              "; HttpOnly; Path=/; SameSite=None; Secure; Max-Age=86400"
            )
            local destination = redirect_uri or "http://localhost:8000"
            kong.log.notice("Redirecting to React app: " .. destination)
            return kong.response.exit(302, nil, {
              ["Location"] = destination
            })
          end
  
  - name: pre-function
    service: backend-api
    route: api-route
    tags:
      - auth-redirect
    config:
      access:
        - |
          if kong.client.get_credential() == nil then
            local path = kong.request.get_path()
            
            -- For API calls, return 401 instead of redirecting
            if string.match(path, "^/api/") then
              return kong.response.exit(401, { authenticated = false })
            end
            
            -- For UI routes, redirect to auth
            local current_url = kong.request.get_scheme() .. "://" .. kong.request.get_host() .. path
            local encoded_url = ngx.encode_base64(current_url)
            return kong.response.exit(302, "", {
              ["Location"] = "https://6e00-122-175-23-214.ngrok-free.app/auth?redirect_uri=" .. encoded_url
            })
          end
  
  - name: pre-function
    route: profile-route
    tags:
      - protected-route
    config:
      access:
        - |
          if kong.client.get_credential() == nil then
            local current_url = kong.request.get_scheme() .. "://" .. kong.request.get_host() .. kong.request.get_path()
            local encoded_url = ngx.encode_base64(current_url)
            return kong.response.exit(302, "", {
              ["Location"] = "https://6e00-122-175-23-214.ngrok-free.app/auth?redirect_uri=" .. encoded_url
            })
          end

  - name: pre-function
    route: dashboard-route
    tags:
      - protected-route
    config:
      access:
        - |
          if kong.client.get_credential() == nil then
            local current_url = kong.request.get_scheme() .. "://" .. kong.request.get_host() .. kong.request.get_path()
            local encoded_url = ngx.encode_base64(current_url)
            return kong.response.exit(302, "", {
              ["Location"] = "https://6e00-122-175-23-214.ngrok-free.app/auth?redirect_uri=" .. encoded_url
            })
          end

  - name: cors
    config:
      origins:
        - "http://localhost:3000"
        - "http://localhost:8000" 
        - "https://6e00-122-175-23-214.ngrok-free.app"
      methods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      headers:
        - Authorization
        - Content-Type
      credentials: true
      exposed_headers:
        - Authorization
        - Set-Cookie
      max_age: 3600

  - name: pre-function
    route: api-route
    config:
      access:
        - |
          -- Debug JWT validation in detail
          local jwt_parser = require "kong.plugins.jwt.jwt_parser"
          
          -- Check cookie
          local cookie = kong.request.get_header("cookie")
          kong.log.notice("Cookie header: " .. (cookie or "nil"))
          
          -- Check if Kong sees the credential
          local credential = kong.client.get_credential()
          if credential then
            kong.log.notice("Credential found: " .. credential.key)
          else
            kong.log.notice("No credential found")
            
            -- Try to manually extract the JWT
            local cookies = kong.request.get_headers()["cookie"] or ""
            local access_token = string.match(cookies, "access_token=([^;]+)")
            if access_token then
              kong.log.notice("Found access_token cookie: " .. access_token:sub(1, 20) .. "...")
              
              -- Try to parse the JWT manually
              local jwt, err = jwt_parser:new(access_token)
              if err then
                kong.log.err("JWT parse error: " .. err)
              else
                local claims = jwt.claims
                kong.log.notice("JWT parsed successfully")
                kong.log.notice("JWT issuer: " .. (claims.iss or "nil"))
                kong.log.notice("JWT subject: " .. (claims.sub or "nil"))
                kong.log.notice("JWT expiration: " .. (claims.exp or "nil"))
              end
            else
              kong.log.notice("No access_token in cookies")
            end
          end
