_format_version: "3.0"
_transform: true

# =====================
# CONSUMERS
# =====================
consumers:
  - username: shared-consumer  # This is just a name
    jwt_secrets:
      - key: shared-key        # This MUST match the 'iss' claim in your JWT
        secret: your_strong_secret_key_at_least_32_chars_long
        algorithm: HS256

# =====================
# SERVICES
# =====================
services:
  - name: backend-api
    url: https://9a96-122-171-174-91.ngrok-free.app

  - name: auth-service
    url: https://9a96-122-171-174-91.ngrok-free.app

  - name: frontend-service
    url: http://host.docker.internal:3000

# =====================
# ROUTES
# =====================
routes:
  - name: api-route
    service: backend-api
    paths:
      - /api
      - /api/
      - ~/api/.*
    strip_path: false

  - name: auth-route
    service: auth-service
    paths:
      - /auth
      - /token
      - /error
      - /saml2
      - /login
    strip_path: false

  - name: profile-route
    service: frontend-service
    paths:
      - /profile
    strip_path: false
    tags:
      - protected-route

  - name: dashboard-route
    service: frontend-service
    paths:
      - /dashboard
    strip_path: false
    tags:
      - protected-route


  - name: root-route
    service: frontend-service
    paths:
      - /
    strip_path: false
# Do NOT add any JWT or auth plugins for root-route!

  - name: logout-route
    paths:
      - /logout
    strip_path: false
    protocols:
      - http
      - https
    service: null  # No backend service - Kong handles it entirely

# =====================
# PLUGINS
# =====================
plugins:
  # JWT plugin must be first for api-route!
  - id: 11111111-aaaa-4aaa-bbbb-000000000001
    name: jwt
    route: api-route
    config:
      cookie_names:
        - access_token
      key_claim_name: iss
      claims_to_verify:
        - exp
      run_on_preflight: true
      secret_is_base64: false

  # CORS plugin (global)
  - id: 11111111-aaaa-4aaa-bbbb-000000000002
    name: cors
    config:
      origins:
        - "http://localhost:3000"
        - "http://localhost:8000"
        - "https://9a96-122-171-174-91.ngrok-free.app"
      methods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      headers:
        - Authorization
        - Content-Type
      credentials: true
      exposed_headers:
        - Authorization
        - Set-Cookie
      max_age: 3600

  # Debug: log JWT cookie presence
  - id: 11111111-aaaa-4aaa-bbbb-000000000003
    name: pre-function
    route: api-route
    tags:
      - jwt-debug
    config:
      access:
        - |
          kong.log.notice("VERBOSE JWT DEBUG ====================")
          kong.log.notice("Request path: " .. kong.request.get_path())
          local cookies = kong.request.get_headers()["cookie"] or ""
          kong.log.notice("Cookies raw: " .. cookies)
          local access_token = string.match(cookies, "access_token=([^;]+)")
          if access_token then
            kong.log.notice("Found token in cookie: " .. access_token:sub(1,10) .. "...")
          else
            kong.log.notice("No access_token found in cookies")
          end
          kong.log.notice("VERBOSE JWT DEBUG END ====================")

  # Token handler for root: set cookie from ?token=...
  - id: 11111111-aaaa-4aaa-bbbb-000000000008
    name: pre-function
    route: root-route
    tags:
      - token-handler
    config:
      access:
        - |
          local token = kong.request.get_query_arg("token")
          if token then
            kong.log.notice("Found token in URL, setting cookie")
            kong.response.set_header("Set-Cookie",
              "access_token=" .. token ..
              "; HttpOnly; Path=/; SameSite=Lax; Max-Age=86400"
            )

            -- Get redirect URL from cookies
            local cookies = kong.request.get_headers()["cookie"] or ""
            local redirect_cookie = string.match(cookies, "return_after_auth=([^;]+)")
            local redirect_url = "/"
            if redirect_cookie then
              local decoded_cookie = ngx.decode_base64(redirect_cookie)
              if decoded_cookie then
                redirect_url = decoded_cookie
                kong.response.add_header("Set-Cookie",
                  "return_after_auth=; Path=/; Max-Age=0; Expires=Thu, 01 Jan 1970 00:00:00 GMT"
                )
              end
            end

            kong.log.notice("Redirecting to: " .. redirect_url)
            return kong.response.exit(302, nil, {
              ["Location"] = redirect_url
            })
          end
          return true

  # Debug: detailed JWT inspection (FIXED VERSION)
  - id: 11111111-aaaa-4aaa-bbbb-000000000010
    name: pre-function
    tags: ["debug"]
    route: api-route
    config:
      access:
        - |
          kong.log.notice("SAFE JWT DEBUG ====================")
          local cookies = kong.request.get_headers()["cookie"] or ""
          kong.log.notice("Cookies: " .. cookies)
          
          local credential = kong.client.get_credential()
          if credential then
            kong.log.notice("JWT credential found with key: " .. (credential.key or "unknown"))
          else
            kong.log.notice("No JWT credential found!")
          end
 

  # Enhanced logout handler that captures referer automatically
  - id: 11111111-aaaa-4aaa-bbbb-00000000000B
    name: pre-function
    route: logout-route
    tags:
      - enhanced-logout-handler
    config:
      access:
        - |
          local path = kong.request.get_path()
          
          if path == "/logout" then
            kong.log.notice("LOGOUT HANDLER ACTIVATED")
            
            -- Get the redirect parameter from query string
            local redirect_to = kong.request.get_query_arg("redirect_to")
            
            -- Default to homepage if no redirect specified
            if not redirect_to or redirect_to == "" then
              redirect_to = "http://localhost:8000/"
            end
            
            -- Make sure we're not redirecting to ngrok
            if redirect_to:find("ngrok%-free%.app") then
              redirect_to = "http://localhost:8000/"
            end
            
            kong.log.notice("Logout redirecting to: " .. redirect_to)
            
            -- Clear cookies in all possible formats
            local cookie_clear_headers = {
              -- Path variations
              "access_token=; Path=/; HttpOnly; Max-Age=0; Expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=Lax",
              "access_token=; Path=/api; HttpOnly; Max-Age=0; Expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=Lax",
              -- Domain variations 
              "access_token=; Path=/; Domain=localhost; HttpOnly; Max-Age=0; Expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=Lax",
              "access_token=; Path=/; Domain=127.0.0.1; HttpOnly; Max-Age=0; Expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=Lax",
              "access_token=; Path=/; Domain=9a96-122-171-174-91.ngrok-free.app; HttpOnly; Max-Age=0; Expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=Lax",
              -- JSESSIONID variations
              "JSESSIONID=; Path=/; HttpOnly; Max-Age=0; Expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=Lax",
              "JSESSIONID=; Path=/; Domain=localhost; HttpOnly; Max-Age=0; Expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=Lax",
              "JSESSIONID=; Path=/; Domain=127.0.0.1; HttpOnly; Max-Age=0; Expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=Lax",
              "JSESSIONID=; Path=/; Domain=9a96-122-171-174-91.ngrok-free.app; HttpOnly; Max-Age=0; Expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=Lax"
            }
            
            -- IMPORTANT: Only use exit() ONCE with all headers
            -- Don't set them separately and then again in exit()
            return kong.response.exit(302, nil, {
              ["Location"] = redirect_to,
              ["Set-Cookie"] = cookie_clear_headers
            })
          end

  # Login referer capture handler
  - id: 11111111-aaaa-4aaa-bbbb-00000000000C
    name: pre-function
    route: auth-route
    tags:
      - login-referer-handler
    config:
      access:
        - |
          -- Only handle the auth path
          if kong.request.get_path() == "/auth" then
            kong.log.notice("LOGIN HANDLER ACTIVATED")
            
            -- Check if a redirect_uri parameter was explicitly provided
            local redirect_uri = kong.request.get_query_arg("redirect_uri")
            
            -- If no explicit redirect_uri, check for existing return_after_auth cookie
            if not redirect_uri or redirect_uri == "" then
              local cookies = kong.request.get_headers()["cookie"] or ""
              local return_cookie = string.match(cookies, "return_after_auth=([^;]+)")
              
              -- If no return_after_auth cookie either, use the referer header
              if not return_cookie or return_cookie == "" then
                local referer = kong.request.get_header("referer")
                
                if referer and referer ~= "" then
                  kong.log.notice("Storing referer as return URL: " .. referer)
                  
                  -- Store the referer in a cookie for after authentication
                  local encoded_referer = ngx.encode_base64(referer)
                  kong.response.set_header("Set-Cookie",
                    "return_after_auth=" .. encoded_referer ..
                    "; HttpOnly; Path=/; SameSite=Lax; Max-Age=300"
                  )
                end
              end
            end
          end

  # JWT Cookie Auth Redirect for profile route
  - name: jwt-cookie-auth-redirect
    route: profile-route
    tags:
      - protected-routes-handler
      
  # JWT Cookie Auth Redirect for dashboard route
  - name: jwt-cookie-auth-redirect
    route: dashboard-route 
    tags:
      - protected-routes-handler

